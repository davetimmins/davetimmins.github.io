<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>davetimmins.github.io</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://davetimmins.github.io/"/>
  <updated>2017-07-19T04:53:47.080Z</updated>
  <id>https://davetimmins.github.io/</id>
  
  <author>
    <name>Dave Timmins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>esri-loader-react</title>
    <link href="https://davetimmins.github.io/2017/07/19/esri-loader-react/"/>
    <id>https://davetimmins.github.io/2017/07/19/esri-loader-react/</id>
    <published>2017-07-18T18:39:21.000Z</published>
    <updated>2017-07-19T04:53:47.080Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/davetimmins/esri-loader-react" target="_blank" rel="external">esri-loader-react</a> is a small React component that wraps <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a>.</p>
<h3 id="esri-loader-and-esri-loader-react"><a href="#esri-loader-and-esri-loader-react" class="headerlink" title="esri-loader and esri-loader-react"></a>esri-loader and esri-loader-react</h3><p>If you’re doing web development with the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> then chances are that you’ve encountered issues with the dojo loader either using custom libraries, different JS frameworks or modern build tooling. <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> is a great way to circumvent these issues. It works by injecting the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> into your page at runtime so you only use the dojo loader for any <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> modules that you need. It was originally written by <a href="https://twitter.com/tomwayson" target="_blank" rel="external">@tomwayson</a> and he has a great <a href="http://tomwayson.com/2016/11/27/using-the-arcgis-api-for-javascript-in-applications-built-with-webpack/" target="_blank" rel="external">blog post</a> on some of the challenges for this type of approach.</p>
<p>The API for <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> exposes 3 functions</p>
<ul>
<li><code>isLoaded()</code></li>
<li><code>bootstrap(callback: Function, options = {} as any)</code></li>
<li><code>dojoRequire(modules: string[], callback: Function)</code></li>
</ul>
<p>The typical workflow then becomes:</p>
<ul>
<li>check if the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> is loaded using <code>isLoaded</code></li>
<li>if not then <code>bootstrap</code> the API, this injects the script</li>
<li>if already loaded or when the script is ready then use <code>dojoRequire</code> to load Esri modules</li>
</ul>
<blockquote>
<p>Note that you still need to manage loading the CSS for the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> yourself, so adding it to the <code>head</code> section of your <code>html</code> is still required</p>
</blockquote>
<p><a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> works with a variety of libraries and frameworks but if you are using <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> then you can use <a href="https://github.com/davetimmins/esri-loader-react" target="_blank" rel="external">esri-loader-react</a>. This is a component that essentially wraps some of the logic you would typically use with <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> so that you have less to do. The part it wraps is the initial call to <code>isLoaded</code> and <code>bootstrap</code> so that once it is ready then you can use <code>dojoRequire</code> as you would normally with <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a>. It does this by using the <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> lifecycle event <code>componentDidMount</code>. So in your application you can mount <a href="https://github.com/davetimmins/esri-loader-react" target="_blank" rel="external">esri-loader-react</a> and think of it as the script tag for the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a>. You only need to do this in one place in your application (the top most component for the application or route) and then you use <code>dojoRequire</code> from one or more other places in your application.</p>
<p>The API for <a href="https://github.com/davetimmins/esri-loader-react" target="_blank" rel="external">esri-loader-react</a> exposes 2 properties</p>
<ul>
<li><code>options</code> - this is passed through to the <code>bootstrap</code> function in <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a></li>
<li><code>ready</code> - a function to be called when the component has mounted and the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> is ready</li>
</ul>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>As well as previous advantages of using these libraries you can also benefit from pre or lazy loading the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> in your application rather than on initial page load. In its simplest usage you can do</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; dojoRequire &#125; <span class="keyword">from</span> <span class="string">'esri-loader'</span>;</div><div class="line"><span class="keyword">import</span> EsriLoader <span class="keyword">from</span> <span class="string">'esri-loader-react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  createMap = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">    dojoRequire([<span class="string">'esri/Map'</span>, <span class="string">'esri/views/MapView'</span>], (<span class="built_in">Map</span>, MapView) =&gt; &#123; </div><div class="line">      <span class="keyword">new</span> MapView(&#123;</div><div class="line">        <span class="attr">container</span>: <span class="keyword">this</span>.mapContainer,</div><div class="line">        <span class="attr">map</span>: <span class="keyword">new</span> <span class="built_in">Map</span>(&#123; <span class="attr">basemap</span>: <span class="string">'oceans'</span> &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// you can omit options and it defaults to the latest version</span></div><div class="line">    <span class="keyword">const</span> options = &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'https://js.arcgis.com/4.4/'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">EsriLoader</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> <span class="attr">ready</span>=<span class="string">&#123;this.createMap&#125;</span> /&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;node</span> =&gt;</span> this.mapContainer = node&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>comparing this to using <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> which would be</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> esriLoader <span class="keyword">from</span> <span class="string">'esri-loader'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  createMap = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">    dojoRequire([<span class="string">'esri/Map'</span>, <span class="string">'esri/views/MapView'</span>], (<span class="built_in">Map</span>, MapView) =&gt; &#123; </div><div class="line">      <span class="keyword">new</span> MapView(&#123;</div><div class="line">        <span class="attr">container</span>: <span class="keyword">this</span>.mapContainer,</div><div class="line">        <span class="attr">map</span>: <span class="keyword">new</span> <span class="built_in">Map</span>(&#123; <span class="attr">basemap</span>: <span class="string">'oceans'</span> &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> options = &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'https://js.arcgis.com/4.4/'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// has the ArcGIS API been added to the page?</span></div><div class="line">    <span class="keyword">if</span> (!esriLoader.isLoaded()) &#123;</div><div class="line">      <span class="comment">// no, lazy load it the ArcGIS API before using its classes</span></div><div class="line">      esriLoader.bootstrap(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="built_in">console</span>.error(err);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// once it's loaded, create the map</span></div><div class="line">          <span class="keyword">this</span>.createMap();</div><div class="line">        &#125;</div><div class="line">      &#125;, options);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// ArcGIS API is already loaded, just do something</span></div><div class="line">      <span class="keyword">this</span>.createMap();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;    </div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;node</span> =&gt;</span> this.mapContainer = node&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>both work the same so feel free to use whichever you prefer.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Some examples that use <a href="https://github.com/davetimmins/esri-loader-react" target="_blank" rel="external">esri-loader-react</a> are</p>
<ul>
<li><a href="https://github.com/davetimmins/create-react-app-esri-loader/" target="_blank" rel="external">create-react-app-esri-loader</a></li>
<li><a href="https://github.com/tomwayson/esri-react-router-example" target="_blank" rel="external">esri-react-router-example</a></li>
<li><a href="https://github.com/davetimmins/arcgis-react-redux-legend" target="_blank" rel="external">arcgis-react-redux-legend</a></li>
<li><a href="https://github.com/davetimmins/preact-legend" target="_blank" rel="external">preact-legend</a> yes it works with <a href="https://preactjs.com/" target="_blank" rel="external">Preact</a> too</li>
</ul>
<p>I haven’t used this but it looks to do something similar to <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> so check it out <a href="https://github.com/nicksenger/esri-promise" target="_blank" rel="external">esri-promise</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/davetimmins/esri-loader-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;esri-loader-react&lt;/a&gt; is a small React componen
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="react" scheme="https://davetimmins.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Integrating Secure SPAs, APIs and ArcGIS Server</title>
    <link href="https://davetimmins.github.io/2017/07/16/Integrating-Secure-SPAs-APIs-and-ArcGIS-Server/"/>
    <id>https://davetimmins.github.io/2017/07/16/Integrating-Secure-SPAs-APIs-and-ArcGIS-Server/</id>
    <published>2017-07-15T22:39:56.000Z</published>
    <updated>2017-07-17T00:42:17.666Z</updated>
    
    <content type="html"><![CDATA[<p>This post outlines a technique I have used recently for consuming secure ArcGIS Server services (using the built in ArcGIS token store) from a client side SPA with the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API v4.4</a> whilst having a separate identity store for the application. There are 4 main application components to consider:</p>
<ul>
<li>the identity provider for our application / API</li>
<li>a server side API for data access</li>
<li>the client application</li>
<li>ArcGIS Server</li>
</ul>
<p>For background purposes, the reason not to use ArcGIS Server security for the application itself is partly down to tooling / flexibility but also since this method allows you to use multiple ArcGIS Servers.</p>
<h3 id="Identity-Provider"><a href="#Identity-Provider" class="headerlink" title="Identity Provider"></a>Identity Provider</h3><p>For this I used <a href="https://identityserver.io/" target="_blank" rel="external">Identity Server</a>. There is a bunch of documentation and samples on their site so I encourage you to look through that if you want detailed information. The basic workflow in the application is that the user accesses the website, they then get a token from our identity provider and store it for use in the client application when it calls our API.</p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>For data access / business logic there are REST API endpoints exposed. These are called from our application to perform the relevant operations / data lookups etc. Since we want to restrict access to these endpoints then the API is secured using our identity provider and will authenticate incoming calls using token validation middleware.</p>
<h3 id="Client-Application"><a href="#Client-Application" class="headerlink" title="Client Application"></a>Client Application</h3><p>This could be written using your framework of choice (there are plenty to choose from!) as it doesn’t really impact the design. I chose <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> and used the <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> cli tool as a starting point. What is important is that this component is responsible for calling the other application components.  These interactions are in the form of </p>
<ul>
<li>API calls</li>
<li>ArcGIS Server REST calls</li>
<li>Authenticating the user via the identity provider</li>
</ul>
<p>After obtaining the token from the identity provider this can be used to set the Authorization request header on each call to our API. It is a good idea to have a single place in your code to act as a gateway for these calls so you have less to change / maintain. Using <a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a> for the requests and example would look like</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*global REACT_APP_API*/</span></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div><div class="line"><span class="keyword">import</span> axiosRetry <span class="keyword">from</span> <span class="string">'axios-retry'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span>;</div><div class="line"></div><div class="line">axiosRetry(axios, &#123; <span class="attr">retries</span>: <span class="number">2</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// a request helper which reads the access_token from the redux state and passes it in its HTTP request</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">apiRequest</span>(<span class="params">url, method = <span class="string">'GET'</span>, data = &#123;&#125;</span>) </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">const</span> token = store.getState().oidc.user.access_token;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> headers = &#123;</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="string">'Authorization'</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> options = &#123; </div><div class="line">    <span class="attr">url</span>: url.indexOf(<span class="string">'://'</span>) &gt; <span class="number">-1</span> ? url : REACT_APP_API + url,</div><div class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 5 seconds</span></div><div class="line">    method,</div><div class="line">    headers,</div><div class="line">    data</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.request(options)</div><div class="line">    .then(</div><div class="line">      <span class="function">(<span class="params">response</span>) =&gt;</span> (&#123; <span class="attr">data</span>: response.data &#125;), </div><div class="line">      (error) =&gt; (&#123; <span class="attr">error</span>: error &#125;))</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="comment">// we get here if there is an unrecoverable error i.e. axiosRetry didn't fix it</span></div><div class="line">      <span class="keyword">if</span> (error.response) &#123;</div><div class="line">        <span class="comment">// do some error stuff</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To make life easier I also used <a href="https://github.com/Esri/esri-loader" target="_blank" rel="external">esri-loader</a> as this makes integrating the Esri JS API with modern JS tooling much more painless. As an added convenience I use <a href="https://github.com/davetimmins/esri-loader-react" target="_blank" rel="external">esri-loader-react</a> in conjunction with that.</p>
<h3 id="ArcGIS-Server"><a href="#ArcGIS-Server" class="headerlink" title="ArcGIS Server"></a>ArcGIS Server</h3><p>Now all our calls to the API will have the access token sent so that we can securely access our endpoints. The next problem is that we also need to access services from ArcGIS Server which are secured using ArcGIS Servers built in accounts and tokens. We could do this by making the user log in again using an ArcGIS Server account but that would be a bad user experience, and if you wanted to consume services from multiple ArcGIS Servers then it would compound the problem. So to make the security transparent to the user we can use an application login for accessing our ArcGIS data. Again there are a couple of options for this, we could use the <a href="https://github.com/Esri/resource-proxy" target="_blank" rel="external">Esri Proxy</a> and set the credentials in the <code>proxy.config</code> but this relies on the HTTP referer header for blocking requests and so could be spoofed. Version 4.4 of the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> allows you to register a token from ArcGIS Server with the <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html" target="_blank" rel="external">Identity Manager</a> so a better solution is to generate the token first and then register that so that subsequent requests to the ArcGIS Server have the token appended. To do this we need to create some logins using ArcGIS Server (and if we want more granularity then set roles for these login accounts). Now we will use these accounts to generate short lived ArcGIS tokens via our secure API. The API method needs to match the claims for the user who initiated the request to some configuration we set in the API project as this will map the incoming claim to an ArcGIS application login. Then this can be used to request the token from ArcGIS Server. To get the token I used another library I wrote call <a href="https://github.com/davetimmins/ArcGIS.PCL" target="_blank" rel="external">ArcGIS.PCL</a> and used the <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/src/ArcGIS.ServiceModel/TokenProvider.cs" target="_blank" rel="external">TokenProvider</a> <code>CheckGenerateToken</code> function. </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">API.Modules</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> API.Configuration;</div><div class="line">    <span class="keyword">using</span> ArcGIS.ServiceModel;</div><div class="line">    <span class="keyword">using</span> IdentityModel;</div><div class="line">    <span class="keyword">using</span> Nancy;</div><div class="line">    <span class="keyword">using</span> Nancy.Security;    </div><div class="line">    <span class="keyword">using</span> System;</div><div class="line">    <span class="keyword">using</span> System.Collections.Generic;</div><div class="line">    <span class="keyword">using</span> System.Linq;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TokenModule</span> : <span class="title">NancyModule</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">static</span> Dictionary&lt;<span class="keyword">string</span>, TokenProvider&gt; _tokenProviders;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TokenModule</span>(<span class="params">List&lt;TokenServerSettings&gt; tokenServerSettings</span>)</span></div><div class="line">            : <span class="title">base</span>(<span class="params"><span class="string">"/gis"</span></span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (tokenServerSettings == <span class="literal">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(tokenServerSettings));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> tokenProviders = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, TokenProvider&gt;();</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> tokenServerSetting <span class="keyword">in</span> tokenServerSettings)</div><div class="line">            &#123;</div><div class="line">                tokenProviders.Add(tokenServerSetting.ClaimRole, <span class="keyword">new</span> TokenProvider(tokenServerSetting.Url, tokenServerSetting.Username, tokenServerSetting.Password));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            _tokenProviders = tokenProviders;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!_tokenProviders.ContainsKey(<span class="string">"user"</span>))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"No token configuration for the user claim role, did you forget to update the TokenServerSettings in appsettings.json?"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.RequiresAuthentication();</div><div class="line"></div><div class="line">            Get(<span class="string">"/token"</span>, <span class="keyword">async</span> (parameters, ct) =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">var</span> roles = <span class="keyword">this</span>.Context.CurrentUser.Claims</div><div class="line">                    .Where(claim =&gt; <span class="keyword">string</span>.Equals(JwtClaimTypes.Role, claim.Type, StringComparison.OrdinalIgnoreCase))</div><div class="line">                    .ToList();</div><div class="line"></div><div class="line">                TokenProvider tokenProvider = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span> (roles != <span class="literal">null</span> &amp;&amp; roles.Any())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> role <span class="keyword">in</span> roles)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span> (_tokenProviders.ContainsKey(role.Value))</div><div class="line">                        &#123;</div><div class="line">                            tokenProvider = _tokenProviders[role.Value];</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (tokenProvider == <span class="literal">null</span>)</div><div class="line">                &#123;</div><div class="line">                    tokenProvider = _tokenProviders[<span class="string">"user"</span>];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> token = <span class="keyword">await</span> tokenProvider.CheckGenerateToken(ct);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Negotiate</div><div class="line">                    .WithStatusCode(HttpStatusCode.OK)</div><div class="line">                    .WithModel(token);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Once we have the ArcGIS token in our client application we register it.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// this calls the method shown in C# above</span></div><div class="line">apiRequest(GET_ARCGIS_TOKEN_URL).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123; </div><div class="line"></div><div class="line">  <span class="comment">// dojoRequire from esri-loader</span></div><div class="line">  dojoRequire(</div><div class="line">    [<span class="string">'esri/identity/IdentityManager'</span>],</div><div class="line">    (esriId) =&gt; &#123;</div><div class="line">    </div><div class="line">    esriId.registerToken(&#123;</div><div class="line">      <span class="attr">server</span>: layer.url,</div><div class="line">      <span class="attr">ssl</span>: result.data.alwaysUseSsl,</div><div class="line">      <span class="attr">token</span>: result.data.value,</div><div class="line">      <span class="attr">expires</span>: result.data.expiry</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This works with any call in the Esri JS API such as map image requests, query / identify calls and also map printing (previously I would have to set the token explicitly on the layer so that printing would work with secure services). You should track the token expiration too so that you can request a new one when needed.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>So to summarize:</p>
<ul>
<li>use built in ArcGIS security</li>
<li>use your own application and API security</li>
<li>request ArcGIS tokens via your API</li>
<li>store that token with the <code>registerToken</code> function on the <code>IdentityManager</code> in you client application</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post outlines a technique I have used recently for consuming secure ArcGIS Server services (using the built in ArcGIS token store) f
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
      <category term="security" scheme="https://davetimmins.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Rotated Icons with Leaflet</title>
    <link href="https://davetimmins.github.io/2015/10/07/Rotated-Icons-with-Leaflet/"/>
    <id>https://davetimmins.github.io/2015/10/07/Rotated-Icons-with-Leaflet/</id>
    <published>2015-10-07T00:00:00.000Z</published>
    <updated>2017-07-16T02:54:09.164Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://davetimmins.github.io/examples/leaflet-rotate/">Demo</a><br><a href="https://github.com/davetimmins/davetimmins.github.io/blob/master/examples/leaflet-rotate/index.html" target="_blank" rel="external">Source</a></p>
<p>I recently had the need to display rotated markers on a map for a project using <a href="http://leafletjs.com" target="_blank" rel="external">Leaflet</a> leaflet and  <a href="http://esri.github.io/esri-leaflet/" target="_blank" rel="external">Esri Leaflet</a>. After a quick Google search I couldn’t see any standard way to do it so I thought I’d roll my own. My dataset had a bearing value which I could use to set the rotation, so I used that in combination with the <code>L.divIcon</code> and some CSS to get the desired result.</p>
<p>A bastardised version of this <a href="http://esri.github.io/esri-leaflet/examples/styling-feature-layer-points.html" target="_blank" rel="external">Styling Points</a> sample can be seen with the <a href="/examples/leaflet-rotate/">effect</a> .</p>
<p>The relevant code bits are</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.rotated-markerdiv</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">background-color</span>: none;</div><div class="line">    <span class="attribute">border</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.rotate-north</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0);            <span class="comment">/* CSS3 */</span></div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(0);       <span class="comment">/* Firefox */</span></div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(0);    <span class="comment">/* Webkit */</span></div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(0);         <span class="comment">/* Opera */</span></div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(0);        <span class="comment">/* IE 9 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> icon = L.divIcon(&#123;</div><div class="line">    <span class="attr">iconSize</span>: [<span class="number">31</span>, <span class="number">27</span>],</div><div class="line">    <span class="attr">iconAnchor</span>: [<span class="number">13.5</span>, <span class="number">13.5</span>],</div><div class="line">    <span class="attr">popupAnchor</span>: [<span class="number">0</span>, <span class="number">-11</span>],</div><div class="line">    <span class="attr">className</span>: <span class="string">'rotated-markerdiv'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">L.esri.featureLayer(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'https://services.arcgis.com/rOo16HdIMeOBI4Mb/arcgis/rest/services/Trimet_Transit_Stops/FeatureServer/0'</span>,</div><div class="line">    <span class="attr">pointToLayer</span>: <span class="function"><span class="keyword">function</span> (<span class="params">geojson, latlng</span>) </span>&#123;</div><div class="line"></div><div class="line">        icon.options.html =</div><div class="line">            <span class="string">'&lt;div class="rotate-'</span> + geojson.properties.direction.toLowerCase() + <span class="string">'"&gt;'</span></div><div class="line">             + <span class="string">'&lt;img src="http://esri.github.io/esri-leaflet/img/bus-stop-north.png" /&gt;'</span></div><div class="line">          + <span class="string">'&lt;/div&gt;'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> L.marker(latlng, &#123;</div><div class="line">            <span class="attr">icon</span>: icon</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">&#125;).addTo(map);</div></pre></td></tr></table></figure>
<p>Now in that sample I am hardcoding the rotated classes since there are only 4 values, but in my real world application it could be between 0 and 359, so rather than type out that I used <a href="http://lesscss.org/" target="_blank" rel="external">Less</a> to allow me to specify the same in a much more terse manner</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.generate-rotate-rules</span>(<span class="number">359</span>);</div><div class="line"></div><div class="line"><span class="selector-class">.generate-rotate-rules</span>(<span class="variable">@n</span>, <span class="variable">@i</span>: <span class="number">0</span>) <span class="keyword">when</span> (<span class="variable">@i</span> =&lt; <span class="variable">@n</span>) &#123;</div><div class="line">    <span class="selector-class">.rotate-</span><span class="variable">@&#123;i&#125;</span> &#123;</div><div class="line">        <span class="attribute">transform</span>: rotate(unit(<span class="variable">@i</span>, deg)); <span class="comment">/* CSS3 */</span></div><div class="line">        <span class="attribute">-moz-transform</span>: rotate(unit(<span class="variable">@i</span>, deg)); <span class="comment">/* Firefox */</span></div><div class="line">        <span class="attribute">-webkit-transform</span>: rotate(unit(<span class="variable">@i</span>, deg)); <span class="comment">/* Webkit */</span></div><div class="line">        <span class="attribute">-o-transform</span>: rotate(unit(<span class="variable">@i</span>, deg)); <span class="comment">/* Opera */</span></div><div class="line">        <span class="attribute">-ms-transform</span>: rotate(unit(<span class="variable">@i</span>, deg)); <span class="comment">/* IE 9 */</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.generate-rotate-rules</span>(<span class="variable">@n</span>, (<span class="variable">@i</span> + <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you have any feedback or suggestions, feel free to sound off in the comments.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://davetimmins.github.io/examples/leaflet-rotate/&quot;&gt;Demo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/davetimmins/davetimmins.github.i
    
    </summary>
    
    
      <category term="leaflet" scheme="https://davetimmins.github.io/tags/leaflet/"/>
    
  </entry>
  
  <entry>
    <title>Console yourself with NuGet</title>
    <link href="https://davetimmins.github.io/2015/10/07/Console-yourself-with-NuGet/"/>
    <id>https://davetimmins.github.io/2015/10/07/Console-yourself-with-NuGet/</id>
    <published>2015-10-06T23:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.070Z</updated>
    
    <content type="html"><![CDATA[<p>Whether you love it or hate it, <a href="https://www.nuget.org/" target="_blank" rel="external">NuGet</a> has made the distribution of .NET libraries much easier than the days of downloading dlls and sticking them in some arbitrary solution folder for reference. Over the past year or so I’ve found that I’ve had to do a fair few console applications so here is a list of some NuGet packages that I used which you may find useful. Note that not all are limited to use in console applications.</p>
<p>In no particular order (descriptions are taken from NuGet).</p>
<h3 id="Topshelf"><a href="#Topshelf" class="headerlink" title="Topshelf"></a>Topshelf</h3><p><a href="https://www.nuget.org/packages/Topshelf/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/Topshelf/Topshelf" target="_blank" rel="external">Project Site</a></p>
<p>Topshelf is an open source project for hosting services without friction. By referencing Topshelf, your console application <em>becomes</em> a service installer with a comprehensive set of command-line options for installing, configuring, and running your application as a service.</p>
<h3 id="PowerArgs"><a href="#PowerArgs" class="headerlink" title="PowerArgs"></a>PowerArgs</h3><p><a href="https://www.nuget.org/packages/PowerArgs/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/adamabdelhamed/PowerArgs" target="_blank" rel="external">Project Site</a></p>
<p>The ultimate .NET command line parser - PowerArgs converts command line arguments into .NET objects that are easy to program against. It also provides a ton of additional, optional capabilities that you can try such as argument validation, auto generated usage documentation, tab completion, Entity Framework querying, secure string arguments, and plenty of hooks for extensibility.</p>
<h3 id="Squirrel-for-Windows"><a href="#Squirrel-for-Windows" class="headerlink" title="Squirrel for Windows"></a>Squirrel for Windows</h3><p><a href="https://www.nuget.org/packages/squirrel.windows/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/squirrel/Squirrel.Windows" target="_blank" rel="external">Project Site</a></p>
<p>An installation and update framework for Windows applications.</p>
<h3 id="Serilog"><a href="#Serilog" class="headerlink" title="Serilog"></a>Serilog</h3><p><a href="https://www.nuget.org/packages/Serilog/" target="_blank" rel="external">NuGet</a>      <a href="http://serilog.net/" target="_blank" rel="external">Project Site</a></p>
<p>Simple .NET logging with fully-structured events.</p>
<h3 id="ConfigR"><a href="#ConfigR" class="headerlink" title="ConfigR"></a>ConfigR</h3><p><a href="https://www.nuget.org/packages/ConfigR/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/config-r/config-r/" target="_blank" rel="external">Project Site</a></p>
<p>Write your .NET configuration files in C#.</p>
<p>Fed up with XML soup? Frustrated that app settings can only be strings? Want to do more in your configuration file than just define app settings? Then ConfigR is for you!</p>
<h3 id="Akka"><a href="#Akka" class="headerlink" title="Akka"></a>Akka</h3><p><a href="https://www.nuget.org/packages/Akka/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/akkadotnet/akka.net" target="_blank" rel="external">Project Site</a></p>
<p>Akka.NET is a port of the popular Java/Scala framework Akka to .NET</p>
<p><em>I’m slightly biased towards the last two as I’m a contributor</em> 😝</p>
<h3 id="ColoredConsole"><a href="#ColoredConsole" class="headerlink" title="ColoredConsole"></a>ColoredConsole</h3><p><a href="https://www.nuget.org/packages/ColoredConsole/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/colored-console/colored-console" target="_blank" rel="external">Project Site</a></p>
<p>Add some color to your console.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ColorConsole.WriteLine(<span class="string">"Hello "</span>.Yellow(), <span class="string">"world!"</span>.Cyan());</div></pre></td></tr></table></figure>
<h3 id="ArcGIS-PCL"><a href="#ArcGIS-PCL" class="headerlink" title="ArcGIS.PCL"></a>ArcGIS.PCL</h3><p><a href="https://www.nuget.org/packages/ArcGIS.PCL/" target="_blank" rel="external">NuGet</a>      <a href="https://github.com/davetimmins/ArcGIS.PCL" target="_blank" rel="external">Project Site</a></p>
<p>ArcGIS.PCL can be used to call ArcGIS Server resources, including those from Portal for ArcGIS and ArcGIS Online. The resources can be secure or unsecure and the ArcGIS Online token service and OAuth token service are supported.</p>
<p>Also supports converting GeoJSON &lt;-&gt; ArcGIS Features.</p>
<hr>
<p>This list is by no means exhaustive but hopefully you found something useful.</p>
<p>What packages do you use? Sound off in the comments.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Whether you love it or hate it, &lt;a href=&quot;https://www.nuget.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NuGet&lt;/a&gt; has made the distribution of .N
    
    </summary>
    
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
      <category term="nuget" scheme="https://davetimmins.github.io/tags/nuget/"/>
    
  </entry>
  
  <entry>
    <title>New Zealand Esri User Conference 2014</title>
    <link href="https://davetimmins.github.io/2014/09/01/New-Zealand-Esri-User-Conference-2014/"/>
    <id>https://davetimmins.github.io/2014/09/01/New-Zealand-Esri-User-Conference-2014/</id>
    <published>2014-09-01T00:00:00.000Z</published>
    <updated>2017-07-16T22:32:49.018Z</updated>
    
    <content type="html"><![CDATA[<p>With this years conference at the Skycity Convention Centre still fresh in the mind I thought I’d just put a note out about my presentations.</p>
<h3 id="Monday"><a href="#Monday" class="headerlink" title="Monday"></a>Monday</h3><h3 id="DEVELOPERS-DEVELOPERS-DEVELOPERS"><a href="#DEVELOPERS-DEVELOPERS-DEVELOPERS" class="headerlink" title="DEVELOPERS, DEVELOPERS, DEVELOPERS"></a><a href="http://davetimmins.github.io/nzeuc2014/workshop/#/">DEVELOPERS, DEVELOPERS, DEVELOPERS</a></h3><p>This was a half day workshop on the Monday (day 0) of the conference and as the title says, it was aimed at developers. I covered what resources are available to get started with when developing for the ArcGIS platform and how to get the most out of the ecosystem before moving on to some recent improvements and then spending a fair amount of time working with the upcoming Web Application Builder. This is the new WYSIWYG HTML 5 and JS based app for quickly building your own applications, I also went into creating custom widgets and themes. After that there was some fully custom code and a discussion on COTS vs. custom.</p>
<h3 id="Mobility-Special-Interest-Group"><a href="#Mobility-Special-Interest-Group" class="headerlink" title="Mobility Special Interest Group"></a>Mobility Special Interest Group</h3><p>On the Monday afternoon I facilitated the Mobility SIG which was a forum for like minded geo geeks to get together and discuss taking ArcGIS mobile. We had guest speakers from Comworth (Darryn Smith), DOC (Martin Slimin) and Isovist (Grant Carroll) so a big thanks to them for their awesome contributions and to everyone else who attended, there were some good topics raised and hopefully there were some interesting takeaways for people.</p>
<h3 id="Tuesday"><a href="#Tuesday" class="headerlink" title="Tuesday"></a>Tuesday</h3><p>I’d like to tell you all about the sessions on Tuesday but I actually ended up working on installing Portal for ArcGIS and setting up Collector so that’s that! I did make it to the dinner though in a star trek outfit along with about 100 other people it seemed.</p>
<h3 id="Wednesday"><a href="#Wednesday" class="headerlink" title="Wednesday"></a>Wednesday</h3><h3 id="Web-Application-Builder-for-ArcGIS"><a href="#Web-Application-Builder-for-ArcGIS" class="headerlink" title="Web Application Builder for ArcGIS"></a><a href="http://davetimmins.github.io/nzeuc2014/wab/">Web Application Builder for ArcGIS</a></h3><p>I had 3 sessions back-to-back on Wednesday afternoon (almost long enough to recover from the previous night) and they started with the Web Application Builder for ArcGIS. This was a joint session with <a href="https://twitter.com/jiriteach" target="_blank" rel="external">@jiriteach</a> and we explained what it is and how it can be used before going on to how you can get more out of it through customization. Either by changing what is provided OOTB or by writing your own widgets and themes.</p>
<h3 id="Extending-ArcGIS-Online"><a href="#Extending-ArcGIS-Online" class="headerlink" title="Extending ArcGIS Online"></a><a href="http://davetimmins.github.io/nzeuc2014/arcgisonline/">Extending ArcGIS Online</a></h3><p>Next up was extending ArcGIS Online which was a tag team effort by <a href="https://twitter.com/djmapper" target="_blank" rel="external">@djmapper</a> and myself. As well as learning about some of the things you can configure and customize in ArcGIS Online, this session also showed that Scott likes to talk, a lot 😋 so we missed the last point which was going to be me probably boring / scaring people by talking about the REST API.</p>
<h3 id="What’s-New-for-Developers"><a href="#What’s-New-for-Developers" class="headerlink" title="What’s New for Developers"></a><a href="http://davetimmins.github.io/nzeuc2014/whatsnew/">What’s New for Developers</a></h3><p>Last up was what’s new for developers. I was joined by Scott again for this and here we ran down a top 10 of recent improvements in the development space across the ArcGIS platform as well as a quick overview of <a href="https://developers.arcgis.com" target="_blank" rel="external">developers.arcgis.com</a></p>
<h3 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h3><p>If you are interested in checking any of them out just click the links and you can see the presentations. They were all done using <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="external">reveal.js</a> which was a first for me and I’d like to thank <a href="https://twitter.com/patrickarlt" target="_blank" rel="external">@patrickarlt</a> and <a href="https://twitter.com/mjuniper" target="_blank" rel="external">@mjuniper</a> for the inspiration and theme which I borrowed / stole. I found it to be far nicer than using PowerPoint as there was no switching between windows / processes since I was already using a web browser and so I could just open links in a new tab.</p>
<p>Feel free to ping me on twitter or leave a comment if you have any feedback.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With this years conference at the Skycity Convention Centre still fresh in the mind I thought I’d just put a note out about my presentati
    
    </summary>
    
    
      <category term="conference" scheme="https://davetimmins.github.io/tags/conference/"/>
    
      <category term="nzeuc" scheme="https://davetimmins.github.io/tags/nzeuc/"/>
    
  </entry>
  
  <entry>
    <title>Using ArcGIS Server with Xamarin Forms Maps</title>
    <link href="https://davetimmins.github.io/2014/06/30/Using-ArcGIS-Server-with-Xamarin-Forms-Maps/"/>
    <id>https://davetimmins.github.io/2014/06/30/Using-ArcGIS-Server-with-Xamarin-Forms-Maps/</id>
    <published>2014-06-30T00:00:00.000Z</published>
    <updated>2017-07-16T03:11:52.765Z</updated>
    
    <content type="html"><![CDATA[<p>With the release of <a href="http://blog.xamarin.com/announcing-xamarin-3/" target="_blank" rel="external">Xamarin 3</a>, Xamarin added <a href="https://xamarin.com/forms" target="_blank" rel="external">Xamarin Forms</a>; a way of building native UIs for iOS, Android and Windows Phone from a single, shared C# codebase. Totally awesome right! Well yes it is and added to that was Xamarin.Forms.Maps which provides a map control you can use in these applications. Now it’s still early days for this so the functionality is pretty basic, especially if you are coming from other mapping / GIS SDKs but what you get is a map control and the ability to overlay point data. It assumes that the data is in WGS84 (lat / long). If you want to get started with taking a look then the <a href="https://github.com/xamarin/xamarin-forms-samples/tree/master/MobileCRM" target="_blank" rel="external">Mobile CRM sample</a> is a good place to start.</p>
<p>What we are going to look at here is adding data from ArcGIS Server using a NuGet package I created called <a href="https://www.nuget.org/packages/ArcGIS.PCL.XamarinMaps/" target="_blank" rel="external">ArcGIS.PCL.XamarinMaps</a>. This package provides a bunch of extension methods for converting ArcGIS Features to and from Xamarin features (Pins, MapSpan). The data retrieval is really done by another package that this one depends on called <a href="https://github.com/davetimmins/ArcGIS.PCL" target="_blank" rel="external">ArcGIS.PCL</a> so check that out first if you want more detail.</p>
<p>Since we can only add point data lets add some points! To speed things up I’ll use the same Mobile CRM sample and for the data I’ll use a sample service hosted at <code>http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/EarthquakesFromLastSevenDays/MapServer/0</code> to get the data. As you might expect this is going to give us recent earthquakes from around the world.</p>
<p>To start we need to add the ArcGIS.PCL.XamarinMaps NuGet package which will tell you something simliar to what is below in its <code>readme</code> file. Then in the shared code project we can hook into the <code>MapViewModel</code> and load our data in the <code>LoadPins()</code> function rather than what is currently there. The code we need is just a few lines</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List&lt;Pin&gt;&gt; LoadPins()</div><div class="line">&#123;</div><div class="line">    ExecuteLoadModelsCommand();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> pins = <span class="keyword">new</span> List&lt;Pin&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> gateway = <span class="keyword">new</span> PortalGateway(</div><div class="line">        <span class="string">"http://sampleserver3.arcgisonline.com/ArcGIS"</span>,</div><div class="line">        <span class="keyword">new</span> ArcGIS.ServiceModel.Serializers.JsonDotNetSerializer());</div><div class="line"></div><div class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> Query(<span class="string">"Earthquakes/EarthquakesFromLastSevenDays/MapServer/0"</span>.AsEndpoint())</div><div class="line">    &#123;</div><div class="line">        Where = <span class="string">"magnitude &gt; 5.5"</span>,</div><div class="line">        OutFields = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; &#123; <span class="string">"magnitude"</span> &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> points = <span class="keyword">await</span> gateway.Query&lt;Point&gt;(query.ToOutputAsGeographic());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> points.ToPins(PinType.Place, <span class="string">"magnitude"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Walking through this we are creating a new <code>PortalGateway</code> for the ArcGIS Server we are interested in. This brokers any operation calls we make and we also pass in a serializer for (de)serializing requests and response.</p>
<p>Next we define a query operation to execute for the service we are interested in. In this case the recent earthquakes, but only those with a magnitude of greater than 5.5.</p>
<p>Then we call the operation and just to make sure the data comes back in WGS84 we call <code>ToOutputAsGeographic()</code> on the query object.</p>
<p>Finally we convert the result to Pins using the <code>ToPins</code> extension method.</p>
<p>If we run the code we get our data nicely displayed on the map control.</p>
<p><img src="https://davetimmins.github.io/images/xamarinmaps.png" alt="Xamarin Maps with ArcGIS data"></p>
<p>You could also go the other way and post data that was captured on the device to an ArcGIS Server feature service using the <code>ApplyEdits</code> operation.</p>
<p>Hopefully this gives you a good starting point to working with these libraries. Feel free to comment here or raise an issue on <a href="https://github.com/davetimmins/ArcGIS.PCL.XamarinMaps" target="_blank" rel="external">GitHub</a> if you have any feedback.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the release of &lt;a href=&quot;http://blog.xamarin.com/announcing-xamarin-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xamarin 3&lt;/a&gt;, Xamarin added &lt;
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="xamarin" scheme="https://davetimmins.github.io/tags/xamarin/"/>
    
  </entry>
  
  <entry>
    <title>Simple Extent Sharing for your Map App</title>
    <link href="https://davetimmins.github.io/2014/06/30/Simple-Extent-Sharing-for-your-Map-App/"/>
    <id>https://davetimmins.github.io/2014/06/30/Simple-Extent-Sharing-for-your-Map-App/</id>
    <published>2014-06-30T00:00:00.000Z</published>
    <updated>2017-07-16T02:54:15.594Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://joosh.azurewebsites.net" target="_blank" rel="external">Demo</a><br><a href="https://github.com/davetimmins/Joosh/blob/master/Joosh.Web.Nancy/scripts/joosh/Bookmarker.js" target="_blank" rel="external">Source</a></p>
<p>A common request for web map applications is to have some sort of bookmark function. Bookmarks are just a quick way of jumping to a saved extent or view for your map and they are usually presented as a list of meaningful names. This is fine when you are using an application but what if you just want a way of sharing an extent with someone or creating a permalink of your extent / view. Here’s a very quick and easy way to do it for the <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="external">Esri JS API</a> using the <code>window.location.hash</code>.</p>
<p>We only need to do 2 things for this. First, since we want to know the extent we need to hook into the map <code>extent-change</code> event and update the <code>location.hash</code>. Second, when we start the app we need to check the <code>location.hash</code> and if an extent is there then set the map extent accordingly. That’s it!</p>
<p>Here’s the entire code for the functionality and a <a href="http://joosh.azurewebsites.net" target="_blank" rel="external">live demo</a>. The source for the demo is on <a href="https://github.com/davetimmins/Joosh" target="_blank" rel="external">GitHub</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">define([</div><div class="line">    <span class="string">'esri/geometry/Extent'</span>,</div><div class="line">    <span class="string">'dojo/_base/lang'</span>,</div><div class="line">    <span class="string">'dojo/_base/declare'</span>,</div><div class="line">    <span class="string">'dojo/on'</span>,</div><div class="line">    <span class="string">'dojo/_base/json'</span>,</div><div class="line">    <span class="string">'dojo/dom'</span>],</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line">        Extent,</div><div class="line">        lang,</div><div class="line">        declare,</div><div class="line">        on,</div><div class="line">        dojo,</div><div class="line">        dom</div><div class="line">    ) &#123;</div><div class="line">        <span class="keyword">return</span> declare(<span class="string">'joosh.Bookmarker'</span>, <span class="literal">null</span>, &#123;</div><div class="line">            <span class="attr">map</span>: <span class="literal">null</span>,</div><div class="line"></div><div class="line">            <span class="attr">constructor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</div><div class="line">                lang.mixin(<span class="keyword">this</span>, params);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.map) &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (<span class="built_in">window</span>.location.hash) &#123;</div><div class="line">                        <span class="keyword">var</span> hashExtent = dojo.fromJson(<span class="string">'&#123;'</span> + <span class="built_in">window</span>.location.hash.replace(<span class="string">'#'</span>, <span class="string">''</span>) + <span class="string">'&#125;'</span>);</div><div class="line">                        <span class="keyword">var</span> savedExtent = <span class="keyword">new</span> Extent(</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">xmin</span>: hashExtent.xmin,</div><div class="line">                            <span class="attr">ymin</span>: hashExtent.ymin,</div><div class="line">                            <span class="attr">xmax</span>: hashExtent.xmax,</div><div class="line">                            <span class="attr">ymax</span>: hashExtent.ymax,</div><div class="line">                            <span class="attr">spatialReference</span>: <span class="keyword">this</span>.map.spatialReference</div><div class="line">                        &#125;);</div><div class="line">                        <span class="keyword">this</span>.map.setExtent(savedExtent);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">this</span>.map.on(<span class="string">'extent-change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                        <span class="built_in">window</span>.location.hash =</div><div class="line">                            <span class="string">"xmin:"</span> + e.extent.xmin +</div><div class="line">                            <span class="string">",ymin:"</span> + e.extent.ymin +</div><div class="line">                            <span class="string">",xmax:"</span> + e.extent.xmax +</div><div class="line">                            <span class="string">",ymax:"</span> + e.extent.ymax;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>Now to enable this you need</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="string">'map'</span>, config.options);</div><div class="line"></div><div class="line"><span class="built_in">require</span>([<span class="string">'joosh/Bookmarker'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Bookmarker</span>) </span>&#123;</div><div class="line">    <span class="keyword">new</span> Bookmarker(&#123; <span class="attr">map</span>: <span class="keyword">this</span>.map&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://joosh.azurewebsites.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/davetimmins/Joosh/blob/ma
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS.PCL Updates</title>
    <link href="https://davetimmins.github.io/2014/05/15/ArcGIS-PCL-Updates/"/>
    <id>https://davetimmins.github.io/2014/05/15/ArcGIS-PCL-Updates/</id>
    <published>2014-05-15T00:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.079Z</updated>
    
    <content type="html"><![CDATA[<p>Inspired by a recent blog post by <a href="https://twitter.com/paulcbetts" target="_blank" rel="external">@paulcbetts</a> I decided to review the ArcGIS.PCL project and see how I can improve it. Previously I was just using the all in approach to package up the functionality so no matter what platform you were targeting, the same code and dependencies would be used. This was working fine to some degree but I realised that I was including more than I needed to for certain platforms and I had also been wondering on the best way to implement some code that wasn’t available to a portable class library. Moving to this updated approach has allowed me to do both of these things better and with very little effort so I’ll explain what I did.</p>
<p>The original solution looked like this.</p>
<p><img src="https://davetimmins.github.io/images/arcgispclsolution original.png" alt="Original solution"></p>
<p>With just the portable class library and some tests. Whereas the current solution is</p>
<p><img src="https://davetimmins.github.io/images/arcgispclsolution current.png" alt="Current solution"></p>
<p>This has the same portable class library with almost all of the same code in it but now there are platform specific projects which allow for platform specific code to be written for each of them is required. The portable class library project now only references the .NET Portable Subset too. Since I left the majority of the code in the PCL, I also reference the PCL from the platform specific projects.</p>
<p>In addition to using the PCL in the other projects I have a couple of other classes that are the same code but since their platform dependencies are different I am not including them in the PCL. Rather than copy the code for each project I just add them as linked files, so if we look at the iOS and .NET versions you can see that they both have 2 linked files and then just 1 platform specific file</p>
<p><img src="https://davetimmins.github.io/images/arcgispcl project comp.png" alt="Project comparison"></p>
<p>So what I’ve had to do so far is</p>
<ul>
<li>Create new projects, 1 for each supported platform</li>
<li>Remove a couple of classes from the PCL</li>
<li>Add those classes as linked files to the platform specific projects</li>
<li>Add any platform specific code to each project</li>
</ul>
<p>And now my final step is to make sure that NuGet knows what to do when a reference is added to this package. I can do this by adding platform specific dependencies in my .nuspec file and what I ended up with is this</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"net40"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Bcl.Async"</span> <span class="attr">version</span>=<span class="string">"1.0.168"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Net.Http"</span> <span class="attr">version</span>=<span class="string">"2.2.22"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"sl5"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Bcl.Async"</span> <span class="attr">version</span>=<span class="string">"1.0.168"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Net.Http"</span> <span class="attr">version</span>=<span class="string">"2.2.22"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"wp8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Net.Http"</span> <span class="attr">version</span>=<span class="string">"2.2.22"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"net45"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Net.Http"</span> <span class="attr">version</span>=<span class="string">"2.2.22"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"netcore45"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"Microsoft.Net.Http"</span> <span class="attr">version</span>=<span class="string">"2.2.22"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"MonoAndroid1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"modernhttpclient"</span> <span class="attr">version</span>=<span class="string">"1.2.2"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"MonoTouch1"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span> <span class="attr">id</span>=<span class="string">"modernhttpclient"</span> <span class="attr">version</span>=<span class="string">"1.2.2"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">group</span> <span class="attr">targetFramework</span>=<span class="string">"portable-net4+sl5+netcore45+wp8+MonoAndroid1+MonoTouch1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Now when you add ArcGIS.PCL from NuGet you will get the version that targets your platform.</p>
<p>One other thing I did as part of this was to try and make it easier to get up and running with the code. Since most of the time you are working with this library is going to involve calling ArcGIS Server resources, some form of serialization is involved and this used to require creating your own implementation of <code>ISerializer</code> to facilitate this (albeit usually just a copy paste from the read me). To this end I created <code>Json.NET</code> and <code>ServiceStack.Text</code> (version 3) <code>ISerializer</code> <a href="https://www.nuget.org/packages?q=arcgis.pcl" target="_blank" rel="external">NuGet packages</a>. Since <code>Json.NET</code> is also a PCL it means that the <code>ArcGIS.PCL.JsonDotNetSerializer</code> package is also a PCL so now you can see one benefit of this approach. You can still use your own serializer if you want though.</p>
<h3 id="Other-Updates"><a href="#Other-Updates" class="headerlink" title="Other Updates"></a>Other Updates</h3><p><a href="https://components.xamarin.com/view/arcgis.pcl" target="_blank" rel="external">ArcGIS.PCL</a> is now on the Xamarin Component Store!</p>
<p>There has been some new functionality added since the previous blog post (in addition to fixing stuff :)) but rather than waffle on about it I’ll just be lazy and list it</p>
<ul>
<li>Added <code>ArcGISOnlineAppLoginOAuthProvider</code> for creating OAuth tokens to use with ArcGIS Online services.</li>
<li>Added ArcGIS Online <code>IEndpoint</code></li>
<li>Added <code>ObjectIds</code> property to <code>Query</code> operation</li>
<li>Added <code>QueryForIds</code> operation</li>
<li>Added <code>QueryForCount</code> operation</li>
<li>Token generation works better for various scenarios and the requests are encrypted if supported on the server</li>
</ul>
<p>and finally I am now using a <a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a> task to build the NuGet packages, it is super simple and very easy to understand so take a look on <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/gruntfile.js" target="_blank" rel="external">GitHub</a> if you are interested. To test these I have a <a href="https://www.myget.org/" target="_blank" rel="external">MyGet</a> feed setup and use <a href="https://ci.appveyor.com" target="_blank" rel="external">AppVeyor</a> as a build server.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Inspired by a recent blog post by &lt;a href=&quot;https://twitter.com/paulcbetts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@paulcbetts&lt;/a&gt; I decided to re
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Sneaky searching with a Fake ArcGIS Locator and Nancy</title>
    <link href="https://davetimmins.github.io/2014/04/11/Sneaky-searching-with-a-Fake-ArcGIS-Locator-and-Nancy/"/>
    <id>https://davetimmins.github.io/2014/04/11/Sneaky-searching-with-a-Fake-ArcGIS-Locator-and-Nancy/</id>
    <published>2014-04-11T00:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.079Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://resources.arcgis.com/en/help/arcgis-rest-api/#/Geocode_Service/02r3000000q9000000/" target="_blank" rel="external">Geocode services</a> are great for searching against one or more spatial datasets. Setting one up requires creating a locator or for more advanced scenarios composite locators which comprise of multiple locators with rules around search order and execution. What happens if you don’t have access to the underlying data that you want to search though, or if there are already ArcGIS Server services published that you want to search against. Well here is a solution using a fake locator (fakeator) that works with the Esri JS <a href="https://developers.arcgis.com/javascript/jsapi/geocoder-amd.html" target="_blank" rel="external">geocoder dijit</a> for both custom applications and using ArcGIS Online. I’m using <a href="https://github.com/NancyFx/Nancy" target="_blank" rel="external">Nancy</a> here but I could easily use another web framework if needed.</p>
<p>If you want to try out the example it’s at <a href="http://fakeator.azurewebsites.net/index.html" target="_blank" rel="external">fakeator.azurewebsites.net</a> and the source is on <a href="https://github.com/davetimmins/ArcGIS.PCL-Sample-Projects/tree/master/UnifiedSearch.Nancy.Sample" target="_blank" rel="external">GitHub</a></p>
<p>The features I want to provide are</p>
<ul>
<li>Work with the geocoder dijit</li>
<li>Work with ArcGIS online / portal</li>
<li>Searching of published ArcGIS server services via query and find operations</li>
</ul>
<h4 id="Geocoder-Dijit"><a href="#Geocoder-Dijit" class="headerlink" title="Geocoder Dijit"></a>Geocoder Dijit</h4><p>In order to work with the geocoder dijit I need to make sure that I am providing the same interface that a standard published Geocode service provides. This is easy to find via the documentation and looking at that in combination with requests that the geocode dijit makes I can see that I only really need the <a href="http://resources.arcgis.com/en/help/arcgis-rest-api/#/Find_Address_Candidates/02r3000000wv000000/" target="_blank" rel="external">find address candidates</a> operation.</p>
<p>So in my search service I’ll define a route for that</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Get[<span class="string">@"/GeocodeServer/findAddressCandidates"</span>, <span class="literal">true</span>] = <span class="keyword">async</span> (x, ct) =&gt;</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">await</span> EsriSearch();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>As well as having my service I need to tell the client how to use it. To do this I can configure the geocoder dijit to use a custom locator with the following</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"esri/map"</span>, <span class="string">"esri/dijit/Geocoder"</span>, <span class="string">"dojo/domReady!"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Map, Geocoder</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="string">"map"</span>, &#123;</div><div class="line">		<span class="attr">basemap</span>: <span class="string">"topo"</span>,</div><div class="line">		<span class="attr">center</span>: [<span class="number">-117.19</span>, <span class="number">34.05</span>], <span class="comment">// lon, lat</span></div><div class="line">		zoom: <span class="number">13</span></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">var</span> myGeocoders = [&#123;</div><div class="line">		<span class="attr">url</span>: <span class="string">"http://fakeator.azurewebsites.net/GeocodeServer"</span>,</div><div class="line">		<span class="attr">name</span>: <span class="string">"Unified Search"</span>,</div><div class="line">		<span class="attr">singleLineFieldName</span>: <span class="string">"SingleLine"</span></div><div class="line">	&#125;];</div><div class="line">	<span class="keyword">var</span> geocoder = <span class="keyword">new</span> Geocoder(&#123;</div><div class="line">		<span class="attr">map</span>: map,</div><div class="line">		<span class="attr">autoComplete</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">arcgisGeocoder</span>: <span class="literal">false</span>,</div><div class="line">		<span class="attr">geocoders</span>: myGeocoders,</div><div class="line">		<span class="attr">value</span>: <span class="string">"100 willis"</span>,</div><div class="line">		<span class="attr">searchDelay</span>: <span class="number">10</span></div><div class="line">	&#125;, <span class="string">"search"</span>);</div><div class="line">	geocoder.startup();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Using this dijit also has the advantage of providing type ahead searching by default.</p>
<h4 id="ArcGIS-Online-Integration"><a href="#ArcGIS-Online-Integration" class="headerlink" title="ArcGIS Online Integration"></a>ArcGIS Online Integration</h4><p>You may have noticed that I am including <code>/GeocodeServer</code> in the url paths above. This is to make sure that I can use the implementation with ArcGIS Online. If you log in to your organization account and go to the settings you have the option to add geocoders under the utility services section. In order for yor service to be added it must be identified by ArcGIS Online as a valid Esri Locator service so I achieve this by providing the expected response when the service is interrogated via the <code>/GeocodeServer</code> endpoint.</p>
<p><img src="https://davetimmins.github.io/images/configure fakeator.PNG" alt="configure fakeator"></p>
<p>The search service implementation just returns the response from an existing valid Locator service.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Get[<span class="string">@"/GeocodeServer"</span>] = _ =&gt;</div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> content = <span class="keyword">new</span> HttpClient().GetStringAsync(<span class="string">"http://geocode.arcgis.com/arcgis/rest/services/World/geocodeserver?f=json"</span>).Result;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> Response.AsText(content).WithContentType(<span class="string">"application/json"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Searching-using-Query-and-Find-Operations"><a href="#Searching-using-Query-and-Find-Operations" class="headerlink" title="Searching using Query and Find Operations"></a>Searching using Query and Find Operations</h4><p>To provide some flexibility with the searching I allow for both query and find operations to be performed. Query works against a single layer in a service whereas find can work across one or more layers and fields. Take a look at the <a href="https://github.com/davetimmins/ArcGIS.PCL-Sample-Projects/blob/master/UnifiedSearch.Nancy/Interface/SearchService.cs#L47" target="_blank" rel="external">code</a> for this yourself if you are interested.</p>
<p>So that the search can be easily changed / configured I have a basic JSON configuration file with my search options which for the published example looks like</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"querySearches"</span>:[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"endpoint"</span>:<span class="string">"http://s3.demos.eaglegis.co.nz/ArcGIS/rest/services/LINZ/crs/MapServer/1"</span>,</div><div class="line">    <span class="attr">"expression"</span>:<span class="string">"STREET_ADDRESS LIKE '&#123;0&#125;%'"</span>,</div><div class="line">    <span class="attr">"type"</span>:<span class="string">"esriGeometryPoint"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"endpoint"</span>:<span class="string">"http://sampleserver6.arcgisonline.com/arcgis/rest/services/WorldTimeZones/MapServer/1"</span>,</div><div class="line">    <span class="attr">"expression"</span>:<span class="string">"ZONE = &#123;0&#125;"</span>,</div><div class="line">    <span class="attr">"type"</span>:<span class="string">"esriGeometryPolygon"</span>,</div><div class="line">    <span class="attr">"regex"</span>:<span class="string">"(-?[0-9]|[0-9]\\d|13)$"</span></div><div class="line">  &#125;],</div><div class="line">  <span class="attr">"findSearches"</span>:[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"endpoint"</span>:<span class="string">"http://sampleserver6.arcgisonline.com/arcgis/rest/services/SampleWorldCities/MapServer"</span>,</div><div class="line">    <span class="attr">"searchFields"</span>:[<span class="string">"CITY_NAME"</span>,<span class="string">"CONTINENT"</span>],</div><div class="line">    <span class="attr">"layerIds"</span>:[<span class="number">0</span>,<span class="number">1</span>]</div><div class="line">  &#125;],</div><div class="line">  <span class="attr">"returnFields"</span>:[<span class="string">"CITY_NAME"</span>,<span class="string">"CONTINENT"</span>,<span class="string">"STREET_ADDRESS"</span>,<span class="string">"ZONE"</span>],</div><div class="line">  <span class="attr">"outputWkid"</span>:<span class="number">102100</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With all this in place the final step is to ensure that I am returning the correct reponse type. Again this is a case of checking the <a href="http://resources.arcgis.com/en/help/arcgis-rest-api/#/Find_Address_Candidates/02r3000000wv000000/" target="_blank" rel="external">REST API documentation</a> and then converting the results from the various requests into the correct type. In this case I want a result that returns a list of candidate locations and an associated spatial reference.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"spatialReference"</span>: &#123;<span class="attr">"wkid"</span> : <span class="number">4326</span>&#125;,</div><div class="line">  <span class="attr">"candidates"</span> : [&#123;</div><div class="line">    <span class="attr">"address"</span> : <span class="string">"1 MASON ST"</span>,</div><div class="line">    <span class="attr">"location"</span> : &#123; <span class="attr">"x"</span> : <span class="number">-122.408951</span>, <span class="attr">"y"</span> : <span class="number">37.783206</span> &#125;,</div><div class="line">    <span class="attr">"score"</span> : <span class="number">75</span>,</div><div class="line">    <span class="attr">"attributes"</span> : &#123;<span class="attr">"StreetName"</span> : <span class="string">"MASON"</span>, <span class="attr">"StreetType"</span> : <span class="string">"ST"</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">    <span class="attr">"address"</span> : <span class="string">"49 MASON ST"</span>,</div><div class="line">    <span class="attr">"location"</span> : &#123; <span class="attr">"x"</span> : <span class="number">-122.408986</span>, <span class="attr">"y"</span> : <span class="number">37.783460</span> &#125;,</div><div class="line">    <span class="attr">"score"</span> : <span class="number">27</span>,</div><div class="line">    <span class="attr">"attributes"</span> : &#123;<span class="attr">"StreetName"</span> : <span class="string">"MASON"</span>, <span class="attr">"StreetType"</span> : <span class="string">"ST"</span>&#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now when I run the application I can search using the data configured and if I need to add or change where I want to search I just need to update my configuration.</p>
<p><img src="https://davetimmins.github.io/images/fakeator search.PNG" alt="fakeator search"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://resources.arcgis.com/en/help/arcgis-rest-api/#/Geocode_Service/02r3000000q9000000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Geocod
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
      <category term="nancy" scheme="https://davetimmins.github.io/tags/nancy/"/>
    
  </entry>
  
  <entry>
    <title>Generating Test Data for Hosted Feature Services</title>
    <link href="https://davetimmins.github.io/2014/04/02/Generating-Test-Data-for-Hosted-Feature-Services/"/>
    <id>https://davetimmins.github.io/2014/04/02/Generating-Test-Data-for-Hosted-Feature-Services/</id>
    <published>2014-04-02T00:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.077Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://randomer.azurewebsites.net" target="_blank" rel="external">Demo</a><br><a href="https://github.com/davetimmins/Randomer" target="_blank" rel="external">Source</a></p>
<p>A couple of months ago I saw a comment on twitter from <a href="https://twitter.com/odoenet" target="_blank" rel="external">odoenet</a> about how it would be useful to be able to generate some sample data for feature services hosted on ArcGIS Online. As chance would have it I have recently had to do some work with hosted feature services and found myself needing to create sample data for a number of services so rather than having to do this manually and multiple times I decided to write a basic web app that does just this. If you want to try it out it’s at <a href="https://randomer.azurewebsites.net" target="_blank" rel="external">randomer.azurewebsites.net</a> and the source is on <a href="https://github.com/davetimmins/Randomer" target="_blank" rel="external">GitHub</a>. It isn’t particulary complex, the basic workflow is</p>
<ul>
<li>Log in to ArcGIS Online using your developer or organizational account</li>
<li>A list of your hosted feature services is shown</li>
<li>Select one and it will query the first layer in the service</li>
<li>Enter the number of features to create</li>
<li>Only attribute fields that are required and are editable will be auto populated (with random data)</li>
</ul>
<p>It is also pretty limited in its current form as it only works with point features and assumes that you only have one layer in your service. You can go through the code to see how it works but I thought I’d do a quick write up of how I did it in case you find it useful.</p>
<p>To start I went to <a href="https://developers.arcgis.com" target="_blank" rel="external">developers.arcgis.com</a> and logged in with my developer account, went ahead and created a new feature service and then looked at the feature service details.</p>
<p><img src="https://davetimmins.github.io/images/create hosted feature service.PNG" alt="Create hosted feature service access"></p>
<p>I am running Fiddler whilst doing this so I can see the queries being used behind the scenes (Note the url, type of request and the parameters used in the request and response). From this information I can now recreate the correct request to query my feature services and start working with them. What this showed me was how to get the feature services for my account and then how to interrogate those services for their service details.</p>
<p><img src="https://davetimmins.github.io/images/arcgis online fiddler.PNG" alt="ArcGIS online fiddler"></p>
<p>Since I am doing the logic on the server I used one of my other libraries <a href="https://github.com/davetimmins/ArcGIS.PCL" target="_blank" rel="external">ArcGIS.PCL</a> and extended it to allow me to have some ArcGIS Online operations. This involves inspecting the json payload of a request and copying it then using Visual Studio and paste as JSON classes in order to create a typed version of the JSON request. Now I can use familiar tooling to write my code and hopefully reduce errors. The classes end up looking like (note that I have removed lots of properties that aren’t needed for this solution)</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">[<span class="meta">DataContract</span>]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SearchHostedFeatureServices</span> : <span class="title">ArcGISServerOperation</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchHostedFeatureServices</span>(<span class="params">ArcGISOnlineEndpoint endpoint, String username</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params">endpoint, <span class="string">"search"</span></span>)</div><div class="line">    &#123;</div><div class="line">        Query = String.Format(<span class="string">"owner:&#123;0&#125; AND (type:\"Feature Service\")"</span>, username);</div><div class="line">        SortField = <span class="string">"created"</span>;</div><div class="line">        SortOrder = <span class="string">"desc"</span>;</div><div class="line">        NumberToReturn = <span class="number">100</span>;</div><div class="line">        StartIndex = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"q"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> String Query &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"sortField"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> String SortField &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"sortOrder"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> String SortOrder &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"num"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> NumberToReturn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"start"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> StartIndex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="meta">DataContract</span>]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SearchHostedFeatureServicesResponse</span> : <span class="title">PortalResponse</span></div><div class="line">&#123;</div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"results"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> HostedFeatureService[] Results &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="meta">DataContract</span>]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HostedFeatureService</span></div><div class="line">&#123;</div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"id"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"name"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [<span class="meta">DataMember(Name = <span class="meta-string">"url"</span>)</span>]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Lastly I know that I want to edit data so I can look at the <a href="http://resources.arcgis.com/en/help/arcgis-rest-api/#/Apply_Edits_Feature_Service_Layer/02r3000000r6000000/" target="_blank" rel="external">ArcGIS REST API documentation</a> to find out what request I need to use to add new data. Then using the same technique as above I can easily replicate that functionality.</p>
<p>Take a look at the <a href="https://github.com/davetimmins/Randomer/blob/master/TestWeb/ServiceInterface/RandomDataService.cs" target="_blank" rel="external">service code</a> for how it is all plumbed together.</p>
<p>So for a few hours of work I have saved myself the tedious task of manually creating data, but it may also be useful for other work in the future and as with any automated process I can reuse and abuse as much as I like. I encourage you to fork away and send me pull requests if you are that way inclined or just leave me a comment with your thoughts.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://randomer.azurewebsites.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/davetimmins/Randomer&quot;
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Esri Dev Summit 2014</title>
    <link href="https://davetimmins.github.io/2014/03/31/Esri-Dev-Summit-2014/"/>
    <id>https://davetimmins.github.io/2014/03/31/Esri-Dev-Summit-2014/</id>
    <published>2014-03-31T00:00:00.000Z</published>
    <updated>2017-07-16T02:53:42.726Z</updated>
    
    <content type="html"><![CDATA[<p>This was held once again in Palm Springs and was my 5th time attending. Every year this event gets bigger and there were around 1800 attendees comprised of Esri staff, distributors and customers. I personally like the venue as it can easily accomodate everyone and is easy to get around including the expo area. The only real gripe would be the food which was pretty average.</p>
<p>I noticed a clear difference in the messaging this year. Previously there has been a focus on cloud technology or configurable tools but this time there were 2 main themes that stood out: Platform and SDKs. Platform is obviously looking at the big picture and encompassing the entire Esri suite whereas the SDKs are really about giving developers a tool to build a great experience for their customers on any technology they want. This is great that we are getting the same set of functionality across the various stacks and it is all achieved by having a common core c++ runtime that each of them uses. The available SDKs at time of writing are:</p>
<ul>
<li>JavaScript</li>
<li>iOS</li>
<li>Android</li>
<li>.NET (WPF, WP, WinStore)</li>
<li>Java</li>
<li>Qt</li>
<li>Silverlight</li>
<li>Flex</li>
<li>OSX</li>
</ul>
<p>That’s a pretty impressive list and if you can’t find an SDK to use from those then I’d be interested to hear why. If you are unfamiliar with the Esri SDKs and want to know more then the best place to start is at <a href="https://developers.arcgis.com" target="_blank" rel="external">developers.arcgis.com</a></p>
<p>These messages were highlighted during the plenary but were also completmented by the keynote which this year was given by Chris Wanstroth the GitHub CEO. Chris delivered a highly entertaining talk about his history and of course about GitHub which Esri is now using extensively. A particular quote of his that resonated with me was</p>
<blockquote>
<p>Collaborate to build valuable software where the customer is the user</p>
</blockquote>
<p>This is always a challenge in software development, actually making something that people want to use and is an area of constant improvement.</p>
<p>As a final note about the conference as a whole, this is the best forum for meeting other developers and core Esri staff. Also, I suck at dodgeball.</p>
<h4 id="Offline"><a href="#Offline" class="headerlink" title="Offline!"></a>Offline!</h4><p>Finally we have the capability to use data offline. This has been requested for what seems like forever and with the 10.2.2 release of ArcGIS Server and the runtime SDKs we can now do this. The deoms that were shown of this all worked well and if you ar efamiliar with the way it worked with ArcGIS Mobile (or ArcGIS for Windows Mobile) then the concept should be straightforward. There was talk of being able to take entire maps offline in the future rather than just basemaps or layers so I can only see this whole experience getting better and better.</p>
<h4 id="Vector-Basemaps"><a href="#Vector-Basemaps" class="headerlink" title="Vector Basemaps"></a>Vector Basemaps</h4><p>I have been saying for a while now (to anyone who’ll listen) that tiled/cached basemaps will not be around for long. They are a pain to maintain, take up lots of storage, can take a long time to generate / copy around and don’t look great on high dpi devices since they are usually built at 96dpi. This last point is becoming increasingly relevant with retina and QHD displays that are commonplace now. Vector basemaps solve lots of these issues and are already used in google / apple maps so it’s good to see Esri working on it. It should see the light of day around the middle of the year and from what was shown the performance is fantastic.</p>
<h4 id="JS-API-v4"><a href="#JS-API-v4" class="headerlink" title="JS API v4"></a>JS API v4</h4><p>We are currently on v3.8 of the JavaScript API with 3.9 and 3.10 likely to come before v4 but Esri teased a few features that are coming for that release.</p>
<ul>
<li>3D (3D is actually coming to all the runtimes)</li>
<li>Client side projections</li>
<li>Animation</li>
<li>View padding</li>
</ul>
<h4 id="JSO"><a href="#JSO" class="headerlink" title="JSO"></a>JSO</h4><p>JSO or the JavaScript Optimizer allows custom builds of the JS API. This is another highly sought after feature and will allow you to pick the modules you need and then generate a build of the JS API continaing those that you can either download and host yourself or host online. Very handy for speeding up page loads. It isn’t live yet but I believe it’ll be at <a href="http://jso.arcgis.com" target="_blank" rel="external">jso.arcgis.com</a> once it is.</p>
<h4 id="Cross-Platform"><a href="#Cross-Platform" class="headerlink" title="Cross Platform"></a>Cross Platform</h4><p>This always gets raised and with the increase in popularity of Xamarin there is always the call for support there. This isn’t being actively developed but if you want it I suggest voting up the <a href="http://ideas.arcgis.com/apex/ideaSearchResults?s=xamarin&amp;searchButton=search" target="_blank" rel="external">idea</a> on the ideas website. What Esri do have for cross platform development is Qt. With Qt you can write c++ applications that run across pretty much any device. Later this year the Esri Qt SDK will be getting support for QML which is a declarative language for writing the UI.</p>
<h4 id="Server-Portal-10-3"><a href="#Server-Portal-10-3" class="headerlink" title="Server / Portal 10.3"></a>Server / Portal 10.3</h4><p>Portal is a product that I am seeing gain in popularity due to the features it has and the business functions it meets. If you aren’t familiar with Portal think of it as ArcGIS Online in your organisation behind your firewall. Some of the upcoming features are:</p>
<ul>
<li>Activity dashboard for portal</li>
<li>Service stats in Server Manager</li>
<li>High availability portal configurations</li>
<li>Control group membership via AD for portal</li>
</ul>
<h4 id="EMF"><a href="#EMF" class="headerlink" title="EMF"></a>EMF</h4><p>Esri Maps Framework is a JavaScript based framework for integrating Esri with BI products such as SAP, SharePoint, Dynamics etc. It can also be used to create your own integrations but perhaps more useful is the ability to use its extensibility to enhance the current integrations, this is coming to Office and SharePoint initially. The EMF is available to Esri distributors and business partners</p>
<h4 id="Web-App-Builder"><a href="#Web-App-Builder" class="headerlink" title="Web App Builder"></a>Web App Builder</h4><p>Yet another highly requested product has been a HTML/JS equivalent of the Flex and Silverlight builders and now we have it. The public beta is available at <a href="http://betacommunity.esri.com/" target="_blank" rel="external">betacommunity.esri.com</a> and I encourage you to check it out for yourself. In a nutshell tools like this are great as they reduce the amount of boilerplate work and allow us to get into crafting workflow specific tools and a unique user experience.</p>
<h4 id="Wrapping-Up"><a href="#Wrapping-Up" class="headerlink" title="Wrapping Up"></a>Wrapping Up</h4><p>If you are interested in seeing more then I recommend checking out the <a href="http://video.esri.com/series/166/2014-esri-international-developer-summit-plenary" target="_blank" rel="external">videos online</a> and lots of the presentation code is on <a href="http://esri.github.io/" target="_blank" rel="external">GitHub</a>.</p>
<p>I’d love to hear your feedback if you attended or if you have any other queries / suggestions.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This was held once again in Palm Springs and was my 5th time attending. Every year this event gets bigger and there were around 1800 atte
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="conference" scheme="https://davetimmins.github.io/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title>TechEd NZ 2013</title>
    <link href="https://davetimmins.github.io/2013/09/15/TechEd-NZ-2013/"/>
    <id>https://davetimmins.github.io/2013/09/15/TechEd-NZ-2013/</id>
    <published>2013-09-15T00:00:00.000Z</published>
    <updated>2017-07-16T02:54:31.544Z</updated>
    
    <content type="html"><![CDATA[<p>With TechEd 2013 having just finished here in New Zealand I thought I’d take the opportunity to summarize my thoughts on the conference this year.</p>
<p>I’ve been to TechEd NZ 3 or 4 times (though I skipped last year) so the general format and layout was familiar. I do think they are struggling with capacity though as it was too crowded around the Expo and when lunching etc. We’ve held our annual conference in the same location for the past 2 years and have about a quarter of the number of attendees and even that can feel snug at times. Having said that, the sessions themselves were generally well catered for in terms of space; I can only recall one session where a few people had to stand. An NFC bracelet was used for tagging into sessions and various stands. This was also part of a competition though it was pretty dumb, I’d like to see a hackathon or similar for things like that.</p>
<p>Having the keynote on the Tuesday afternoon was a welcome change as it afforded me the opportunity of taking a leisurely flight up on Tuesday morning and I’m sure the presenters were glad of a later start. It also flowed nicely into the welcome drinks which gave me my first look around the Expo; pretty standard fare though it was fun getting to have a play (and winning) on the XBox One. The keynote itself was a tad underwhelming, Paul Ego was good as master of ceremonies and all the speakers were fine though with limited time it was very much a case of whetting peoples appetites. I also found the talk by Sean Gourley equal parts interesting, confusing and irrelevant. He is undoubtedly a smart guy but his story seemed to lack direction towards the end and I didn’t really see how it tied into the Microsoft brand.</p>
<p>I found my sessions were broadly split between the Azure and development streams starting with a double header by the Gu on building real world cloud apps with Windows Azure. If the keynote was the taster then this really served up a veritable buffet of information and both sessions whizzed by in no time. It was fantastic to see such a high profile figure being secured to present in New Zealand and he really set a standard that was closely matched throughout the conference in terms of style and quality. Of all the sessions I attended just 2 were disappointing, partly due to content and partly due to the speaker(s). That may sound a bit harsh but after being spoiled with some highly entertaining talks the flat ones really stood out. Back on a positive note, 2 of my favourite sessions were Real-time Clouds: SignalR &amp; Windows Azure by Brady Gaster and 10 F# Features Every C# Developer Should Crave by Ivan Towlson. Both speakers had me laughing more than once and both had packed uber amounts of goodness into their sessions, top job.</p>
<p>Overall, there were no massive surprises though it was good to get some exposure to things that I’ve heard of but not had a proper dive into yet such as node, reactive extensions, the Windows Azure CLI and F#. Whilst also gaining more insight into things such as Azure, async and TFS 2013. It’s always good to be on the lookout for things to add to my development toolbox and these are things that are sure to come in useful.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With TechEd 2013 having just finished here in New Zealand I thought I’d take the opportunity to summarize my thoughts on the conference t
    
    </summary>
    
    
      <category term="conference" scheme="https://davetimmins.github.io/tags/conference/"/>
    
      <category term="teched" scheme="https://davetimmins.github.io/tags/teched/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS.PCL - The What, Why &amp; How</title>
    <link href="https://davetimmins.github.io/2013/07/11/ArcGIS-PCL-The-What-Why-How/"/>
    <id>https://davetimmins.github.io/2013/07/11/ArcGIS-PCL-The-What-Why-How/</id>
    <published>2013-07-11T00:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.070Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/davetimmins/ArcGIS.PCL" target="_blank" rel="external">ArcGIS.PCL</a> is a portable class library for calling ArcGIS Server resources. It is currently built to target .NET for Windows Store apps, .NET framework 4.5, Silverlight 4 and higher &amp; Windows Phone 7.5 and higher. It provides a mechanism to call an ArcGIS Server REST endpoint and to work with the corresponding response.</p>
<p>I created this project after having several small projects that required some form of communication directly to ArcGIS Server. Since there is no nice way of using an existing Esri SDK from a server side web application or console application I found myself having to write calls directly. Whilst not particularly hard, I found that the code across these projects was similar and so I decided to create a separate project to wrap these calls. It is not intended to be a replacement for any of the Esri SDKs but can be used in situations where they are either overkill or not readily accessible.</p>
<p>The project uses the concept of a <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/ArcGIS.ServiceModel/IPortalGateway.cs" target="_blank" rel="external">gateway</a> to broker the calls to ArcGIS. This gateway is responsible for determining the call and formatting the request and response types. Requests can be to either secure or insecure resources and each call is referred to as an operation. The gateway caters for secure calls automatically if it is created with user credentials (this assumes that ArcGIS Server token based security is used). Once the gateway is created it can be thought of as the root site for an ArcGIS Server instance.</p>
<p>The current typed operations supported are:</p>
<ul>
<li><p>Generate token</p>
<ul>
<li>uses the token service</li>
<li>automatically generated if an ITokenProvider is passed to the gateway</li>
<li>auto appended to each request</li>
<li>automatically regenerated if the token expires</li>
</ul>
</li>
<li><p>Query</p>
<ul>
<li>attribute or spatial query</li>
</ul>
</li>
<li><p>Apply Edits</p>
<ul>
<li>add, update, delete for a layer in a feature service</li>
</ul>
</li>
<li><p>Single Input Geocode</p>
</li>
<li><p>Reverse Geocode</p>
</li>
<li><p>Project</p>
</li>
<li><p>Simplify</p>
</li>
</ul>
<p>in addition there are two gateway methods used for diagnostics (I could see these being useful when used in a scripting context)</p>
<ul>
<li><p>Ping</p>
<ul>
<li>determine if a Url can be reached</li>
</ul>
</li>
<li><p>Describe Site</p>
<ul>
<li>returns all resource endpoints for an ArcGIS Server instance</li>
<li>useful for discovery, validating environments are the same (DEV, TEST, PROD), checking access for different user logons, producing documentation (<a href="https://arcgissitedescriptor.azurewebsites.net/" target="_blank" rel="external">example site</a>)</li>
</ul>
</li>
</ul>
<p>Each time you want to call an operation it is just a case of knowing the endpoint Url for it. Since the gateway already has the root Url, these Url’s are relative to the root for each resource. The interface <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/ArcGIS.ServiceModel/Common/IEndpoint.cs" target="_blank" rel="external">IEndpoint</a> is used for this and for the operations defined it is in the context of an ArcGISServerEndpoint which handles the endpoint Url construction.</p>
<p>There are also some common objects used for operations that are included. The most notable of these is a <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/ArcGIS.ServiceModel/Common/Feature.cs" target="_blank" rel="external">Feature</a>. This contains <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/ArcGIS.ServiceModel/Common/IGeometry.cs" target="_blank" rel="external">geometry</a> and associated attributes and is used for most common operations. Since it can be serialized as JSON it can also be used to feed into an existing Esri SDK or Web API.</p>
<p>Due to the project being a portable class library I have split the de/serialization out so that it is specific to each implementation. Each gateway needs an ISerializer implementation that will be used when calling resources. The test project has ServiceStack.Text and Json.NET <a href="https://github.com/davetimmins/ArcGIS.PCL/blob/master/ArcGIS.Test/ISerializer.cs" target="_blank" rel="external">examples</a>.</p>
<p>In addition to being able to used the typed operations above, you can also call any resource and get the data back by requesting a dynamic object as the return type. There is an example in the tests that shows this where the return is defined as</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class AgsObject : ServiceStack.Text.JsonObject, IPortalResponse</div><div class="line">&#123;</div><div class="line">    [System.Runtime.Serialization.DataMember(Name = "error")]</div><div class="line">    public ArcGISError Error &#123; get; set; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>by using this type, the return value is created as a dictionary containing the results, handy if you don’t want to create a class for the result type (though using the VS Paste Special -&gt; Paste JSON as Classes makes this pretty quick).</p>
<p>If you are still reading then hopefully you want to get the code and start using it. The quickest way to get started is to install the library using NuGet. Search for <a href="https://www.nuget.org/packages/ArcGIS.PCL/" target="_blank" rel="external">ArcGIS.PCL</a> in the package manager and install it, or you can get the code directly from <a href="https://github.com/davetimmins/ArcGIS.PCL/releases" target="_blank" rel="external">GitHub</a>. Once you have the code the first thing to do is create your gateway and ISerializer implementation (or use an existing example).</p>
<p>Some typical uses could be</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ArcGIS Server with non secure resources</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArcGISGateway</span> : <span class="title">PortalGateway</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArcGISGateway</span>(<span class="params">ISerializer serializer</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params"><span class="string">"http://sampleserver3.arcgisonline.com/ArcGIS/"</span>, serializer</span>)</div><div class="line">    &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">... <span class="keyword">new</span> ArcGISGateway(serializer);</div><div class="line"></div><div class="line"><span class="comment">// ArcGIS Server with secure resources</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SecureGISGateway</span> : <span class="title">SecureArcGISServerGateway</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecureGISGateway</span>(<span class="params">ISerializer serializer</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params"><span class="string">"http://serverapps10.esri.com/arcgis"</span>, <span class="string">"user1"</span>, <span class="string">"pass.word1"</span>, serializer</span>)</div><div class="line">    &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">... <span class="keyword">new</span> SecureGISGateway(serializer);</div><div class="line"></div><div class="line"><span class="comment">// ArcGIS Server with secure resources and token service at different location</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SecureTokenProvider</span> : <span class="title">TokenProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecureTokenProvider</span>(<span class="params">ISerializer serializer</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params"><span class="string">"http://serverapps10.esri.com/arcgis"</span>, <span class="string">"user1"</span>, <span class="string">"pass.word1"</span>, serializer</span>)</div><div class="line">    &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SecureGISGateway</span> : <span class="title">PortalGateway</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecureGISGateway</span>(<span class="params">ISerializer serializer, ITokenProvider tokenProvider</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params"><span class="string">"http://serverapps10.esri.com/arcgis"</span>, serializer, tokenProvider</span>)</div><div class="line">    &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">... <span class="keyword">new</span> SecureGISGateway(serializer, <span class="keyword">new</span> SecureTokenProvider(serializer));</div><div class="line"></div><div class="line"><span class="comment">// ArcGIS Online either secure or non secure</span></div><div class="line">... <span class="keyword">new</span> ArcGISOnlineGateway(serializer);</div><div class="line"></div><div class="line">... <span class="keyword">new</span> ArcGISOnlineGateway(serializer, <span class="keyword">new</span> ArcGISOnlineTokenProvider(<span class="string">"user"</span>, <span class="string">"pass"</span>, serializer));</div></pre></td></tr></table></figure>
<p>hopefully you find it easy to work with and any feedback is welcome.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/davetimmins/ArcGIS.PCL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ArcGIS.PCL&lt;/a&gt; is a portable class library for calling
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS Online OAuth with ServiceStack</title>
    <link href="https://davetimmins.github.io/2013/04/12/ArcGIS-Online-OAuth-with-ServiceStack/"/>
    <id>https://davetimmins.github.io/2013/04/12/ArcGIS-Online-OAuth-with-ServiceStack/</id>
    <published>2013-04-12T00:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.070Z</updated>
    
    <content type="html"><![CDATA[<p>Esri recently released support for authenticating users and applications using OAuth 2 on their new developer site. In this post we will look at adding a provider to an existing web site built using <a href="http://www.servicestack.net/" target="_blank" rel="external">ServiceStack</a> to see how you can integrate your ArcGIS Online (AGO) users with another web application.<br>The ArcGIS <a href="https://developers.arcgis.com/en/authentication/" target="_blank" rel="external">documentation</a> covers user and app logins. We will be focusing on user logins since app logins will most likely be transparent to end users via a proxy or the like. To get started you should <a href="https://developers.arcgis.com/en/sign-in/" target="_blank" rel="external">sign in</a> to ArcGIS for Developers with your subscription or developer account and in your applications choose new application and set the details.</p>
<p>As we want to use OAuth we also need to set the Redirect URI, this should match the location of the provider. For testing my application looks like</p>
<p><img src="https://davetimmins.github.io/images/oauth1.jpg" alt="new application"></p>
<p>once created we can select API Access from the sidebar to get the Client ID and Secret to use when authenticating. Make sure to note these down but do not share them publically</p>
<p><img src="https://davetimmins.github.io/images/oauth2.jpg" alt="API access"></p>
<p>Now that we have our application configured with AGO we are ready to code the OAuth provider. To speed testing up I used the ServiceStack <a href="https://github.com/ServiceStack/SocialBootstrapApi" target="_blank" rel="external">Social Bootstrap template</a> as this already has similar functionality so it is just a matter of adding the new provider. ServiceStack makes this very easy thanks to its excellent documentation and wealth of sample code.</p>
<p>The details for parameters and urls to call are on the ArcGIS website so I’ll let you look at the code rather than waffling on about it but in a nutshell we are getting verification from AGO that the user is who they say they are and then getting some additional user information via the ArcGIS Portal API.</p>
<p>There is already an OAuthProvider base class for us to inherit from so we’ll base our implementation on that. The only other steps we need to follow are to register our new authentication provider with ServiceStack by including it as an authentication method in our AppHost</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Register all Authentication methods you want to enable for this web app.</span></div><div class="line">Plugins.Add(<span class="keyword">new</span> AuthFeature(() =&gt; <span class="keyword">new</span> CustomUserSession(), <span class="comment">//Use your own typed Custom UserSession type</span></div><div class="line">    <span class="keyword">new</span> IAuthProvider[] &#123;</div><div class="line">        <span class="keyword">new</span> CredentialsAuthProvider(),              <span class="comment">//HTML Form post of UserName/Password credentials</span></div><div class="line">        <span class="keyword">new</span> TwitterAuthProvider(appSettings),       <span class="comment">//Sign-in with Twitter</span></div><div class="line">        <span class="keyword">new</span> FacebookAuthProvider(appSettings),      <span class="comment">//Sign-in with Facebook</span></div><div class="line">        <span class="keyword">new</span> DigestAuthProvider(appSettings),        <span class="comment">//Sign-in with Digest Auth</span></div><div class="line">        <span class="keyword">new</span> BasicAuthProvider(),                    <span class="comment">//Sign-in with Basic Auth</span></div><div class="line">        <span class="keyword">new</span> GoogleOpenIdOAuthProvider(appSettings), <span class="comment">//Sign-in with Google OpenId</span></div><div class="line">        <span class="keyword">new</span> YahooOpenIdOAuthProvider(appSettings),  <span class="comment">//Sign-in with Yahoo OpenId</span></div><div class="line">        <span class="keyword">new</span> OpenIdOAuthProvider(appSettings),       <span class="comment">//Sign-in with Custom OpenId</span></div><div class="line">        <span class="keyword">new</span> ArcGISAuthProvider(appSettings)         <span class="comment">// Sign-in using our AGO Id</span></div><div class="line">    &#125;));</div></pre></td></tr></table></figure>
<p>then add the configuration application settings to our web.config to pass through the Client ID and Client Secret that we created earlier. The convention the ServiceStack uses for these is</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"oauth.arcgis.ConsumerKey"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"oauth.arcgis.ConsumerSecret"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>where arcgis is the name defined in our provider. Though as with pretty much everything in ServiceStack the key names can be configured.</p>
<p>Finally you will need some UI to show the user a link to click and choose to sign in with ArcGIS. This will be a link to points to the same place as the redirect url we configured when adding our application to AGO. Hopefully someone will make a nice icon for people to embed in their sites.</p>
<p>In <code>Index.cshtml</code> under Views/Shared</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"arcgis-signin"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"~/api/auth/arcgis"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>When you run the app and click on the sign in with ArcGIS link you will be redirected to AGO where you can now enter your AGO account credentials.</p>
<p><img src="https://davetimmins.github.io/images/oauth3.jpg" alt="ArcGIS Online login"></p>
<p>The full code for the ArcGISAuthProvider is listed below. Thanks for reading.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> ServiceStack.Configuration;</div><div class="line"><span class="keyword">using</span> ServiceStack.ServiceHost;</div><div class="line"><span class="keyword">using</span> ServiceStack.ServiceInterface;</div><div class="line"><span class="keyword">using</span> ServiceStack.ServiceInterface.Auth;</div><div class="line"><span class="keyword">using</span> ServiceStack.Common;</div><div class="line"><span class="keyword">using</span> ServiceStack.Text;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArcGISAuthProvider</span> : <span class="title">OAuthProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> Name = <span class="string">"arcgis"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Realm = <span class="string">"https://www.arcgis.com/sharing/oauth2/"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArcGISAuthProvider</span>(<span class="params">IResourceManager appSettings</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params">appSettings, Realm, Name</span>) &#123; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">Authenticate</span>(<span class="params">IServiceBase authService, IAuthSession session, ServiceStack.ServiceInterface.Auth.Auth request</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> tokens = Init(authService, <span class="keyword">ref</span> session, request);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> error = authService.RequestContext.Get&lt;IHttpRequest&gt;().QueryString[<span class="string">"error"</span>];</div><div class="line">        <span class="keyword">var</span> isPreAuthError = !error.IsNullOrEmpty();</div><div class="line">        <span class="keyword">if</span> (isPreAuthError) <span class="keyword">return</span> authService.Redirect(session.ReferrerUrl);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> code = authService.RequestContext.Get&lt;IHttpRequest&gt;().QueryString[<span class="string">"code"</span>];</div><div class="line">        <span class="keyword">var</span> isPreAuthCallback = !code.IsNullOrEmpty();</div><div class="line">        <span class="keyword">if</span> (!isPreAuthCallback)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> preAuthUrl = Realm + <span class="string">"authorize?response_type=code&amp;client_id=&#123;0&#125;&amp;redirect_uri=&#123;1&#125;"</span>;</div><div class="line">            preAuthUrl = preAuthUrl.Fmt(ConsumerKey, CallbackUrl.UrlEncode());</div><div class="line"></div><div class="line">            authService.SaveSession(session, SessionExpiry);</div><div class="line">            <span class="keyword">return</span> authService.Redirect(preAuthUrl);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> accessTokenUrl = Realm +</div><div class="line">                             <span class="string">"token?grant_type=authorization_code&amp;code=&#123;0&#125;&amp;redirect_uri=&#123;1&#125;&amp;client_id=&#123;2&#125;&amp;client_secret=&#123;3&#125;"</span>;</div><div class="line">        accessTokenUrl = accessTokenUrl.Fmt(code, CallbackUrl.UrlEncode(), ConsumerKey, ConsumerSecret);</div><div class="line"></div><div class="line">        <span class="comment">// get the access token and store the result</span></div><div class="line">        <span class="keyword">var</span> contents = accessTokenUrl.GetStringFromUrl();</div><div class="line">        <span class="keyword">var</span> authInfo = JsonObject.Parse(contents);</div><div class="line">        tokens.AccessToken = authInfo[<span class="string">"access_token"</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (tokens.AccessToken.IsNullOrEmpty())</div><div class="line">            <span class="keyword">return</span> authService.Redirect(session.ReferrerUrl.AddHashParam(<span class="string">"f"</span>, <span class="string">"AccessTokenFailed"</span>));</div><div class="line"></div><div class="line">        tokens.RefreshToken = authInfo[<span class="string">"refresh_token"</span>];</div><div class="line">        tokens.RefreshTokenExpiry = DateTime.UtcNow.AddSeconds(Double.Parse(authInfo[<span class="string">"expires_in"</span>]));</div><div class="line">        tokens.UserName = authInfo[<span class="string">"username"</span>];</div><div class="line"></div><div class="line">        session.IsAuthenticated = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        OnAuthenticated(authService, session, tokens, authInfo.ToDictionary());</div><div class="line">        authService.SaveSession(session, SessionExpiry);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> authService.Redirect(session.ReferrerUrl.AddHashParam(<span class="string">"s"</span>, <span class="string">"1"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LoadUserAuthInfo</span>(<span class="params">AuthUserSession userSession, IOAuthTokens tokens, Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; authInfo</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> url = <span class="string">"https://www.arcgis.com/sharing/rest/community/users/&#123;0&#125;?f=json"</span>;</div><div class="line">        url = url.Fmt(authInfo[<span class="string">"username"</span>]);</div><div class="line">        <span class="keyword">var</span> json = url.GetStringFromUrl();</div><div class="line"></div><div class="line">        <span class="keyword">var</span> data = JsonObject.Parse(json);</div><div class="line">        tokens.DisplayName = data.Get(<span class="string">"fullName"</span>);</div><div class="line">        tokens.FullName = data.Get(<span class="string">"fullName"</span>);</div><div class="line">        <span class="comment">// todo : get more data if available</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LoadUserOAuthProvider</span>(<span class="params">IAuthSession authSession, IOAuthTokens tokens</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> userSession = authSession <span class="keyword">as</span> AuthUserSession;</div><div class="line">        <span class="keyword">if</span> (userSession == <span class="literal">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        userSession.DisplayName = tokens.DisplayName ?? userSession.DisplayName;</div><div class="line">        userSession.FullName = tokens.FullName ?? userSession.DisplayName;</div><div class="line">        userSession.FirstName = tokens.FirstName ?? userSession.FirstName;</div><div class="line">        userSession.LastName = tokens.LastName ?? userSession.LastName;</div><div class="line">        userSession.PrimaryEmail = tokens.Email ?? userSession.PrimaryEmail ?? userSession.Email;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Esri recently released support for authenticating users and applications using OAuth 2 on their new developer site. In this post we will 
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
      <category term="oauth" scheme="https://davetimmins.github.io/tags/oauth/"/>
    
      <category term="security" scheme="https://davetimmins.github.io/tags/security/"/>
    
      <category term="servicestack" scheme="https://davetimmins.github.io/tags/servicestack/"/>
    
  </entry>
  
  <entry>
    <title>Initial Impressions with iOS and XCode</title>
    <link href="https://davetimmins.github.io/2012/07/18/Initial-Impressions-with-iOS-and-XCode/"/>
    <id>https://davetimmins.github.io/2012/07/18/Initial-Impressions-with-iOS-and-XCode/</id>
    <published>2012-07-18T00:00:00.000Z</published>
    <updated>2017-07-16T02:53:56.940Z</updated>
    
    <content type="html"><![CDATA[<p>I was recently asked if I’d like to spend a couple of weeks working on a prototype iPhone application. Curious as to what the development experience is like for iOS I obliged and here are some of my impressions / thoughts from working with it for this short period of time. I’m sure some of my gripes are down to lack of knowledge so if you have any comments or suggestions please share them.</p>
<p>For some background I come mainly from .NET (predominantly C#) with most of my projects being web based and more recently I’ve done a fair amount of work with Silverlight and WPF. I have done a couple of Java projects and in my early days worked with Progress 4GL and completed a medium sized C++ project. For the prototype I have been running OS X Lion 10.7.3 with Xcode 4.3.3.</p>
<p>Using Xcode has been….OK. I’m often working on more than one project at a time so only being able to run one instance is a bit of a change for me, especially when trying to learn as I find it useful to go through samples as well as what I’m working on. I found the UI to be a bit cluttered but that’s in part due to the smaller screen estate I’ve been working with. I don’t really have too many gripes with the IDE though I found debugging to be a poor experience. I liked the ease of deploying to either the simulator or a connected device and things like being able to simulate GPS locations is a nice touch. It was also good to see local version control baked in from the start.</p>
<p>My favourite thing so far has to be storyboards. They’re a quick and easy way to visually layout and design your application including navigating through views. From searching around Google it seems that experienced iOS developers opinion on them is mixed but I found them very useful and was able to be fairly productive before even having to write a single line of code. It would be nice if it was easier to navigate around the storyboard using the mouse instead of scrolling or selecting a UI component from the side bar. I don’t usually use the design view in visual studio very often as I find it quicker to write directly to mark-up but this is something I enjoyed using. Having said that it would be nice to be able to add third party controls in the same way as the native objects rather than having to add them programmatically (I did this with the Tapku calendar control).</p>
<p>I also like the way that the MVC pattern is used though I found the model part, at least the controller model interaction to be lacking. As part of my prototype I was using a wizard style UI for entering data so the model was used on a number of views. I decided to use prototypes and delegates to pass the model around which works fine though I’m not sure of the best approach. I’d seen people using the NSNotificationCenter or using a singleton in the AppDelegate though they seemed less attractive. This was one of the few things I couldn’t find a decisive answer on as generally there was a plethora of useful information on stackoverflow, github, the apple developer site and various blogs. To persist the data I opted to use core data. This was nice and easy to use and I didn’t encounter any major issues though the NSManagedObject generation seemed a tad flaky.</p>
<p>One of the things that surprised me was some of the inconsistency with the UI controls. I expected things like the keyboard to automagically show / hide and to be able to set the accessory in the designer but apparently not. Gestures are also opt in generally, I guess it’s credit to some of the apps out there that I expected this default behaviour. This meant that I ended up writing more code than I expected to get some basic functionality working such as showing a picker on a button click rather than showing the picker (I hate that control, takes up way too much space) or populating a table view with the detail of a selected item.</p>
<p>Overall I’d say I’m still undecided. Maybe with a shiny new MacBook Pro I’d have more fun ☺. One of the biggest hurdles when working with something new is productivity. I know I’d be way more productive using familiar tools but it’s also fun to learn new things and I think I managed to achieve a fair amount in the short time I was given so I’ll definitely be on the lookout for more opportunities to work with the iOS platform in the future.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I was recently asked if I’d like to spend a couple of weeks working on a prototype iPhone application. Curious as to what the development
    
    </summary>
    
    
      <category term="xcode" scheme="https://davetimmins.github.io/tags/xcode/"/>
    
      <category term="ios" scheme="https://davetimmins.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Enhancing GIS WebApps with SignalR</title>
    <link href="https://davetimmins.github.io/2011/11/21/Enhancing-GIS-WebApps-with-SignalR/"/>
    <id>https://davetimmins.github.io/2011/11/21/Enhancing-GIS-WebApps-with-SignalR/</id>
    <published>2011-11-21T00:00:00.000Z</published>
    <updated>2017-07-16T20:56:11.072Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mapr.azurewebsites.net/" target="_blank" rel="external">Demo</a><br><a href="https://github.com/davetimmins/mapr" target="_blank" rel="external">Source</a></p>
<p>A few weeks ago I saw this cool new open source project called <a href="http://signalr.net/" target="_blank" rel="external">SignalR</a> and was wondering about ways to incorporate it into the type of GIS web applications that I usually work on. SignalR is an asynchronous signalling library for ASP.NET. There are a number of great write ups about it so I recommend you search for these and check them out along with the project on GitHub. The main usage I’d seen for SignalR had been to create chat applications and whilst this was a good demonstration of the technology it isn’t typically that useful for my scenario so in this demo I’m going to be applying it to a simple problem. I have a web page where I want to display the locations of any users that are currently accessing it. Whenever someone connects to the page it should update the connection for everyone else currently connected and it should display the number of other people connected. If someone disconnects from the page then they should be removed from all the other still active connections. So basically I want to sync the state of everyone accessing the page. You may have seen a demo where each time a browser window is opened a counter is incremented and this is taking this and applying it to a different visualization.</p>
<p>To start you can create a new web application in Visual Studio and add the SignalR reference using NuGet.</p>
<p>Now there are 2 parts that we need to code, the server side and client side implementation of our logic. On the server we need to add the ability to add and remove locations. These methods will be invoked from JavaScript on the client and can also call JavaScript functions on the client from the server side, very cool. All this is really doing is passing messages between connected clients using the proxy that SignalR generates for these operations.</p>
<p>Add a new class that inherits the abstract <code>Microsoft.AspNet.SignalR.Hub</code> class.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LocationHub</span> : <span class="title">Hub</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; _graphics = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="keyword">object</span> json</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> graphic <span class="keyword">in</span> _graphics) &#123;</div><div class="line">            Clients.Caller.addGraphic(graphic.Key, graphic.Value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Clients.Others.addGraphic(Context.ConnectionId, json);</div><div class="line"></div><div class="line">        _graphics.TryAdd(Context.ConnectionId, json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="keyword">string</span> id, <span class="keyword">object</span> json</span>)</span></div><div class="line">    &#123;</div><div class="line">        _graphics.AddOrUpdate(id, json, (key, oldValue) =&gt; json);</div><div class="line">        Clients.Others.updateGraphic(id, json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">OnDisconnected</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">object</span> removed;</div><div class="line">        _graphics.TryRemove(Context.ConnectionId, <span class="keyword">out</span> removed);</div><div class="line">        <span class="keyword">return</span> Clients.All.leave(Context.ConnectionId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now we need to add the client side code to call and handle these methods. Start by creating a new html page and add references to the jQuery and SignalR scripts.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Scripts/jquery-1.6.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Scripts/jquery.signalR-1.0.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"signalr/hubs"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In order to use the methods we just defined we need to create the proxy reference. Then we can either invoke or handle the various methods.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connection = $.hubConnection();</div><div class="line">locationConnection = connection.createHubProxy(<span class="string">'locationHub'</span>);</div></pre></td></tr></table></figure>
<p>Now we have the proxy we can call the methods defined for it. So for the above example, if I want to call the <code>Add</code> method for the <code>LocationHub</code> on the server I would use</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locationConnection.invoke(<span class="string">'add'</span>, graphic.toJson());</div></pre></td></tr></table></figure>
<p>where I’m passing the graphic as a Json string value I want to use (the parameter binding is done automatically but you need to define the correct type). Now to handle what happens when the <code>Add</code> method is called I need to add the <code>addGraphic</code> handler on the client since that is called from the server, once again making sute that the definition matches what was used on the server. The convention we can use is</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">locationConnection.on(<span class="string">'addGraphic'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id, json</span>) </span>&#123;</div><div class="line">    <span class="comment">// stuff here...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This will be called for any page that defines the handler but in this example it is in the same page. So now we have seen how to wire up the calls we need to apply it to our initial requirement. Thinking about the requirement we can identify the steps that we need to follow once our proxy is created which in a nutshell are</p>
<ul>
<li>First, lookup the user location using the W3C geolocation API</li>
<li>Do a reverse geocode of the location to get the address</li>
<li>Call the add method so that the new location is added to any other open client</li>
<li>When we close the page or navigate away we need to notify other clients that we have left so that they can remove the location</li>
</ul>
<p>To do this I’m using the <a href="https://developers.arcgis.com/en/javascript/" target="_blank" rel="external">ArcGIS JavaScript API</a>. This allows me to reverse geocode the location from the browser and add it to the map display as well as adding a maptip for the address data. You can run the sample page yourself or you can create your own app using the code on this post. If you run the sample and get some of your friends to access it at the same time then you should see the map markers appear and display the address if you click on them. Note that you will need to be using a browser that supports geolocation. There is some additional logic for when the user hovers over a graphic too but you can look at the source yourself to see how that is handled.</p>
<p>The sample itself looks like</p>
<iframe src="https://mapr.azurewebsites.net" width="100%" height="400px" frameborder="0" seamless></iframe>

<p>but to really appreciate what is happening its best to have more than one browser open at the same time. Try <a href="https://mapr.azurewebsites.net" target="_blank" rel="external">opening</a> / closing more browser windows.</p>
<p>This is a very simple example of enhancing your application but there are many other scenarios where SignalR could be utilised such as</p>
<ul>
<li>Shared redlining / editing</li>
<li>Controlling user sessions</li>
<li>Real time data updates</li>
<li>etc</li>
</ul>
<p>Remember this is just a sample to demonstrate the concept. Thanks for reading, as always feedback is appreciated and I’d be interested to hear what you would find it useful for.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://mapr.azurewebsites.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/davetimmins/mapr&quot; target
    
    </summary>
    
    
      <category term="arcgis" scheme="https://davetimmins.github.io/tags/arcgis/"/>
    
      <category term="dotnet" scheme="https://davetimmins.github.io/tags/dotnet/"/>
    
      <category term="signalr" scheme="https://davetimmins.github.io/tags/signalr/"/>
    
  </entry>
  
</feed>
